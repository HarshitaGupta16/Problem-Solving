REVERSE INTEGER
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:
  Input: 123
  Output: 321
Example 2:
  Input: -123
  Output: -321
Example 3:
  Input: 120
  Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’2^31,  2^31 âˆ’ 1].
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Approach: Find the reverse of the number. Check if the number is within the range or not.
          If the number is out of range, then return 0 else return reverse integer.
          
class Solution:
    def reverse(self, x: int) -> int:
        rev = 0
        num = x
        while(abs(x)!=0):
            rem = abs(x) % 10
            rev = rev*10 + rem 
            x = int(abs(x)/10)
            
        if(num<0): 
            if(rev > -2147483648 and rev < 2147483648):
                return -rev
            else:
                return 0
        elif(num>=0 ):
            if(rev > -2147483648 and rev < 2147483648):
                return rev
            else:
                return 0
        #elif(rev < -2147483648 and rev > 2147483647):
        #    return 0
        
