SORTED SUBSEQUENCE OF SIZE 3
Given an array A of N integers, Your task is to complete the function find3Numbers which finds any 3 elements in it
such that A[i] < A[j] < A[k] and i < j < k. 
You need to return them as a vector, if no such element is present then return the empty vector of size 0.

Example:
Input:
2
5
1 2 1 1 3
3
1 1 3
Output:
1
0

Explanation:
There are 2 test cases
For first test case
a sub-sequence 1 2 3 exist 
For second test case
no such sub-sequence exist

Approach: We need to complete the function that returns the triplet in less time complexity i.e less than O(n^3)
          1. Take an empty list A1.
          2. Now, run a loop from 1 to n-1 (We started loop from 1 because in line 3, if we start from i=0, then A[:0] means empty list which cannot be passed in min function)
          3. Assign x=A[i]
          4. y = min(A[:i])
          5. if y<x then find the maximum element from remaining elements and store it in z
             z=max(A[i+1:])
          6. if x<z, then, append y,x,z in the list A1.
          7. Return the list
          
#Your task is to complete this function
#Your function should return a array/list containing the triplet, if no such triplet exist's then return empty array/list
def find3number(n, A):
    #Code here
    #flag=0
    A1=[]
    for i in range(1,n-1):   #If loop starts from 0 then, A[:0] would return empty list
                             #in first for first loop, so min function cannot have empty argument and so we get error
                             #So start loop from 1. 
        x = A[i]
        y = min(A[:i])
        if y<x:
            z = max(A[i+1:])
            if(x < z):
                A1.append((y,x,z))
                    
    return A1


#{ 
#  Driver Code Starts
#Your Code goes here
if __name__=='__main__':
    t=int(input())
    for i in range(t):
        n=int(input())
        arr=list(map(int, input().strip().split()))
        lis = find3number(n, arr)
        if len(lis)!=0:
            print(1)
        else:
            print(0)
# } Driver Code Ends
