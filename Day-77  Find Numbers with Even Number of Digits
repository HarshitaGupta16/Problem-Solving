FIND NUMBERS WITH EVEN NUMBER OF DIGITS
Given an array nums of integers, return how many of them contain an even number of digits.

Example 1:

Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.

Example 2:

Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 

Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 10^5

Approach:
Method 1: If the number in the list is greater than equal to 10 and less than equal to 99 OR 
          If the number is greater than equal to 1000 and less than equal to 9999 then count+=1
          Return count
Method 2: If log base 10 of the number + 1 is divisible by 2 then the number has even number of digits. Thus count such numbers.
          Return count

import math
class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count=0
        for i in nums:
            #if (i>=10 and i<=99) or (i>=1000 and i<=9999):
            #    count+=1
            if((int(math.log10(i))+1) % 2 == 0):
                count+=1
                
        return count
